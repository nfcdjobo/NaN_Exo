******************************************************************************************************
*****************************************RESUME Git et GitHub*****************************************
******************************************************************************************************


	--------------------------------------------------------------------------------
	-------------------------------------Le Git-------------------------------------
	--------------------------------------------------------------------------------

Git est un logiciel de versioning autrement dit un logiciel de gestion de version créé en 2005 par Linus Torvalds, le créateur de Linux.
Un logiciel de versioning, ou un logiciel de gestion de version est un logiciel permettant de conserver les historiques des modifications effectuées sur un projet afin de pouvoir rapidement identifier les changements effectués et de revenir à une ancienne version en cas de problème.
Retenons aussi que de nos jours les logiciels de gestion de versions sont quasiment incontournables car ils facilitent grandement la gestion de projets et ils permettent de travailler en équipe de manière beaucoup plus efficace.
Parmi les logiciels de gestion de versions, Git est le leader incontesté et il est donc indispensable pour tout développeur de savoir utiliser Git.

Précisons aussi que les logiciels de gestion de version sont aujourd’hui tous construits sur deux modèles à savoir le modèle centralisé ou le modèle décentralisé encore appelé modèle distribué.
Le principe de base d’un modèle centralisé est la centralisation du code source lié au projet : la source du code du projet est hébergée sur un serveur distant central et les différents utilisateurs doivent se connecter à ce serveur pour travailler sur ce code.
Dans un modèle distribué, le principe de base est opposé : le code source du projet est toujours hébergé sur un serveur distant mais chaque utilisateur est invité à télécharger et à héberger l’intégralité du code source du projet sur sa propre machine.
Le modèle distribué a été popularisé par Git et présente différents avantages notables par rapport au modèle centralisé :
Simplicité / flexibilité du travail : Comme chaque utilisateur peut héberger le code du projet, on n’a plus besoin d’être constamment connecté à un serveur central et on peut donc travailler en ligne sur sa propre machine ;
Sécurité : Comme chaque utilisateur possède le code complet d’un projet, on peut utiliser la copie du projet d’un utilisateur comme back-up en cas de corruption du serveur central.



	-----------------------------------------------------------------------------------
	-------------------------------------Le GitHub-------------------------------------
	-----------------------------------------------------------------------------------

Comme nous l’avons dit là-haut le Git est un logiciel de gestion de version qui va nous permettre d’enregistrer les différentes modifications effectuées sur un projet et de pouvoir retourner à une version précédente du projet.
Dans le langage des systèmes de gestion de version, la copie de l’intégralité des fichiers d’un projet et de leur version située sur le serveur central est appelé un dépôt. Git appelle également cela “repository” ou “repo” en abrégé en d’autres thème ”dépôt” en français.

Le GitHub est un service en ligne qui permet d’héberger des dépôts ou repo Git. C’est le plus grand hébergeur de dépôts Git du monde.

Une grande partie des dépôts hébergés sur GitHub sont publics, ce qui signifie que n’importe qui peut télécharger le code de ces dépôts et contribuer à leur développement en proposant de nouvelles fonctionnalités.

Pour récapituler, et afin d’être bien clair sur ce point : Git est un logiciel de gestion de version tandis que GitHub est un service en ligne d’hébergement de dépôts Git qui fait office de serveur central pour ces dépôts.

Nous verrons comment utiliser GitHub en détail dans ce cours après avoir appris à utiliser Git.



	-----------------------------------------------------------------------------------
	------Utilisation de Git : ligne de commande, console et interface graphique-------
	-----------------------------------------------------------------------------------

Utilisation de Git : ligne de commande, console et interface graphique

On peut utiliser différents types d’interfaces pour installer et utiliser Git.

Il convient de retenir qu’utiliser la ligne de commande est le seul moyen d’avoir accès à toutes les commandes Git ;
Toutes les personnes vont avoir accès aux mêmes commandes avec la ligne de commande, ce qui signifie que tout le monde pourra suivre ce cours de la même façon ;
Si vous savez comment utiliser la version en ligne de commande, vous saurez utiliser n’importe quelle autre interface graphique.




